// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GrassWind

#include "NoiseCompute.compute"

float _Time;

float _Frequency;
float _Amplitude;
float _TurbPower;
float _TurbSize;

float4 _MainWindDir;

struct GrassData
{
    float3 position;
    float3 windDirection;
};

RWStructuredBuffer<GrassData> _GrassDataBuffer;//

[numthreads(128,1,1)]
void GrassWind (uint3 id : SV_DispatchThreadID)
{
    GrassData grass = _GrassDataBuffer[id.x];

    float xPeriod = _MainWindDir.x * 0.1; // Repetition of lines in x direction
    float zPeriod = _MainWindDir.z * 0.1; // Repitition of lines in y direction
    float turbPower = _TurbPower;
    float turbSize = _TurbSize;

    float xyValue = grass.position.x * xPeriod + grass.position.z * zPeriod + turbPower * snoise(id * turbSize);
    float sineValue = sin((xyValue + _Time * _Amplitude) * _Frequency);
    
    //sineValue = -0.99;
    sineValue = (sineValue * 0.5 + 0.501);

    grass.windDirection = sineValue * _MainWindDir.xyz;

    grass.windDirection.y = 0;

    _GrassDataBuffer[id.x] = grass;
}
