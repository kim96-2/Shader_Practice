// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define PI 3.14159265358979323846

struct Cube
{
    float3 position;
    float4 color;
};

RWStructuredBuffer<Cube> cubes;

uint _Resolution;
float _Time;

float2 GetUV (uint3 id) {
	//return (id.xy + 0.5) - 1.0;
    return id.xy - _Resolution / 2.0;
}

void SetCube (uint3 id, float3 position, float4 color) {
    Cube cube;
    
    cube.position = position;

    cube.color = color;

    if (id.x < _Resolution && id.y < _Resolution) {
		cubes[id.x + id.y * _Resolution] = cube;
	}
	
}

float3 Wave (float u, float v, float t) {
	float3 p;
	p.x = u;
	p.y = sin(PI * (u + v + t));
	p.z = v;
	return p;
}

[numthreads(4,4,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{


    float2 uv = GetUV(id);

    SetCube(id, Wave(uv.x, uv.y, _Time), float4(1, 0, 0, 1));
    
}
