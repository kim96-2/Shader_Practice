// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel WaveKernel
#pragma kernel RippleKernel
#pragma kernel SphereKernel
#pragma kernel TorusKernel

#define PI 3.14159265358979323846

struct Cube
{
    float3 position;
    float4 color;
};

RWStructuredBuffer<Cube> cubes;

uint _Resolution;
float _Radius;
float _Time;

float4x4 _ModelMatrix;

float2 GetUV (uint3 id) {
	//return (id.xy / (float)_Resolution);
    return (id.xy + 0.5) * 2.0 / _Resolution - 1.0;
}

void SetCube (uint3 id, float3 position, float4 color) {
    Cube cube;
    
    cube.position = mul(_ModelMatrix, float4(position, 1)).xyz;

    cube.color = color;

    if (id.x < _Resolution && id.y < _Resolution) {
		cubes[id.x + id.y * _Resolution] = cube;
	}
	
}

float3 Wave (float u, float v, float t) {
	float3 p;
	//p.x = u * (float)_Resolution;
	//p.y = sin(PI * (u + v + t));
	//p.z = v * (float)_Resolution;

    float r = 0.9 + 0.1 * sin(PI * (6.0 * u + 4.0 * v + t));
    r *= _Radius;
	float s = r * cos(0.5 * PI * v);

	p.x = s * sin(PI * u);
	p.y = r * sin(0.5 * PI * v);
	p.z = s * cos(PI * u);
	return p;
}

float3 Ripple (float u, float v, float t) {
	float d = sqrt(u * u + v * v);
	float3 p;
	p.x = u;
	p.y = sin(PI * (4.0 * d - t));
	p.y /= 1.0 + 10.0 * d;
	p.z = v;
	return p * _Radius;
}

float3 Sphere (float u, float v, float t) {
	float3 p;
	p.x = u;
	p.y = sin(PI * (u + 0.5 * t));
	p.y += 0.5 * sin(2.0 * PI * (v + t));
	p.y += sin(PI * (u + v + 0.25 * t));
	p.y *= 1.0 / 2.5;
	p.z = v;
	return p * _Radius;
}

float3 Torus (float u, float v, float t) {
	float r1 = 0.7 + 0.1 * sin(PI * (6.0 * u + 0.5 * t));
	float r2 = 0.15 + 0.05 * sin(PI * (8.0 * u + 4.0 * v + 2.0 * t));
	float s = r2 * cos(PI * v) + r1;
	float3 p;
	p.x = s * sin(PI * u);
	p.y = r2 * sin(PI * v);
	p.z = s * cos(PI * u);
	return p * _Radius;
}

#define KERNEL_FUNC(function) \
	[numthreads(8,8,1)] \
	void function##Kernel (uint3 id : SV_DispatchThreadID) \
	{ \
		float2 uv = GetUV(id); \
		SetCube(id, function(uv.x, uv.y, _Time), float4((float)id.x / _Resolution, (float)id.y / _Resolution, 0, 1)); \
	}

KERNEL_FUNC(Wave)
KERNEL_FUNC(Ripple)
KERNEL_FUNC(Sphere)
KERNEL_FUNC(Torus)

